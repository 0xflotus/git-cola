#!/bin/sh
. $(dirname $0)/common.sh

# Options
do_docs=false
do_website=false
do_tarball=false
do_win32=false
do_upload=false

usage () {
	echo "$(basename "$0") [options]"
	echo
	echo "options:"
	echo "--all                     - build tarball, win32, docs, and web"
	echo "--tarball                 - build the tarball"
	echo "--tarball-dir             - specify the tarball release directory"
	echo "--doc                     - build the documentation"
	echo "--doc-dir <dir>           - specify the documentation directory"
	echo "--win32                   - build the win32 installer"
	echo "--win32-login <user@host> - specify the win32 host"
	echo "--win32-port <port #>     - specify the win32 ssh port number"
	echo "--win32-cola-dir <dir>    - specify the win32 cola repo path"
	echo "--win32-python-dir <dir>  - specify the win32 python directory"
	echo "--version <version>       - specify the version number"
	echo "--upload                  - upload release assets to github"
	echo "--upload-file <path>      - upload one release asset"
	exit 1
}

init_release () {
	if test -z "$vVERSION"
	then
		return 1
	fi
	if ! "$META/github-release" identify "$vVERSION"
	then
		commit=$(git rev-parse "$vVERSION""^{commit}")
		do_or_die "$META/github-release" create "$vVERSION" "$commit"
	fi
}

build_docs () {
	title Building docs
	do_or_die make prefix="$DOCUMENT_ROOT" install-doc
}

build_tarball () {
	title Building tarball
	do_or_die make app-tarball
	if test "$do_upload" = true
	then
		upload_file git-cola-"$VERSION".app.tar.gz
	fi
}

build_win32_remotely () {
	title Building win32 remotely

	do_or_die ssh -p $WIN32_SSH_PORT "$WIN32_LOGIN" '
		PATH='"$WIN32_PYTHON"':'"$WIN32_PYTHON/Scripts"':'"$WIN32_GIT"':'"$WIN32_NSIS"':"$PATH"
		export PATH
		cd '"$WIN32_COLA_DIR"' &&
		rm -rf build/nsis &&
		pynsist pynsist.cfg
	'
	do_or_die scp -P $WIN32_SSH_PORT \
		"$WIN32_LOGIN":"$WIN32_COLA_DIR"/build/nsis/"*.exe" .

	do_or_die ssh -p $WIN32_SSH_PORT \
		"$WIN32_LOGIN" "/bin/rm '$WIN32_COLA_DIR'/build/nsis/*.exe"

	do_or_die mv git-cola_"$VERSION".exe git-cola-"$VERSION".exe
	do_or_die chmod 644 git-cola-"$VERSION".exe
	do_or_die zip -9 -m git-cola-"$VERSION".windows.zip \
		-xi git-cola-"$VERSION".exe
	if test "$do_upload" = true
	then
		upload_file git-cola-"$VERSION".windows.zip
	fi
}

upload_file () {
	filename="$1"
	do_or_die "$META/github-release" upload "$vVERSION" "$filename"
}

# Parse options
while test $# -gt 0
do
	case "$1" in
	--doc-dir)
		shift
		DOCUMENT_ROOT="$1"
		shift
		;;
	--all)
		shift
		# we no longer release the Mac OS X app.tar.gz
		# do_tarball=true
		do_win32=true
		do_docs=true
		do_upload=true
		;;
	--tarball)
		shift
		do_tarball=true
		;;
	--doc)
		shift
		do_docs=true
		;;
	--version)
		shift
		VERSION="$1"
		shift
		;;
	--win32)
		shift
		do_win32=true
		;;
	--win32-login)
		shift
		WIN32_LOGIN="$1"
		shift
		;;
	--win32-cola-dir)
		shift
		WIN32_COLA_DIR="$1"
		shift
		;;
	--win32-python-dir)
		shift
		WIN32_PYTHON="$1"
		shift
		;;
	--win32-port)
		shift
		WIN32_SSH_PORT="$1"
		shift
		;;
	--upload)
		shift
		do_upload=true
		;;
	--no-upload)
		shift
		do_upload=false
		;;
	--upload-file)
		shift
		upload_file "$1"
		shift
		;;
	--)
		shift
		break
		;;
	*)
		usage
		;;
	esac
done

if test "$do_tarball" = true || test "$do_upload" = true
then
	init_release
fi


if test "$do_tarball" = true
then
	build_tarball
fi

if test "$do_win32" = true
then
	build_win32_remotely
fi

if test "$do_docs" = true
then
	build_docs
fi
