#!/usr/bin/env python
# Copyright(C) 2007, David Aguilar <davvid@gmail.com>
import os
import sys
import optparse
from os.path import join
from os.path import dirname
from os.path import realpath

def setup_environment():
    """Prepends sys.path with cola's module path."""
    # ex: sys.path = [ /usr/share, ... ]
    #     from cola import utils
    # implies: utils = /usr/share/cola/utils.py
    cola   = realpath(sys.argv[0])
    bin    = dirname(cola)
    prefix = dirname(bin)
    share  = join(prefix,'share')
    sys.path.insert(0, share)

def main():
    parser = optparse.OptionParser(
                        usage='%prog /repo/path-1 ... /repo/path-N*\n\n'
                              '*the current directory is used when no '
                              'paths are specified.')

    parser.add_option('-v', '--version',
                      help='Show cola version',
                      dest='version',
                      default=False,
                      action='store_true')
    opts, args = parser.parse_args()

    # allow "git cola /path/to/repo"
    if args:
        os.chdir(os.path.realpath(args[0]))

    # This sets up sys.path so that the cola modules can be found.
    setup_environment()
    if opts.version:
        from cola.version import VERSION
        print "cola version", VERSION
        sys.exit(0)

    # allow "git cola /repo/path-1 .. /repo/path-N
    from cola.models import Model
    from cola import utils
    from cola.views import View
    from cola.controllers import Controller
    if args[1:]:
        for repo in [ os.path.realpath(r) for r in args[1:] ]:
            utils.fork('git', 'cola', repo)
    # load the model right away so that we can bail out when
    # no git repo exists
    model = Model()
    # PyQt4
    try:
        from PyQt4 import QtCore
        from PyQt4 import QtGui
    except ImportError:
        print 'Sorry, you do not seem to have PyQt4 installed.'
        print 'Please install it before using cola.'
        print 'e.g.:    sudo apt-get install python-qt4'
        sys.exit(-1)

    class ColaApplication(QtGui.QApplication):
        """This makes translation work by throwing out the context."""
        wrapped = QtGui.QApplication.translate
        def translate(*args):
            trtxt = unicode(ColaApplication.wrapped('', *args[2:]))
            if trtxt.endswith('@@verb') or trtxt.endswith('@@noun'):
                trtxt = trtxt[:-6]
            return trtxt

    app = ColaApplication(sys.argv)
    QtGui.QApplication.translate = app.translate
    app.setWindowIcon(QtGui.QIcon( utils.get_icon('git.png')) )
    locale = str(QtCore.QLocale().system().name())
    qmfile = utils.get_qm_for_locale(locale)
    if os.path.exists(qmfile):
        translator = QtCore.QTranslator(app)
        translator.load(qmfile)
        app.installTranslator(translator)
    # simple mvc
    view = View(app.activeWindow())
    ctl = Controller(model, view)
    view.show()
    sys.exit(app.exec_())
if __name__ == '__main__':
    main()
