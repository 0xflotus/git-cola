#!/bin/sh
#
# This program uses mergetools to stage commits
#
# Copyright (c) 2008 David Aguilar
#
# This file is licensed under the GPL v2, or a later version
# at the discretion of Junio C Hamano.
#

USAGE='[--tool=tool] [file to merge] ...'
SUBDIRECTORY_OK=Yes
OPTIONS_SPEC=
. git-sh-setup
require_work_tree

index_present ()
{
    test -n "$index_mode"
}

modified_present () {
    test -n "$modified_mode"
}

commitish_present () {
	test -n "$commitish"
}


modified_files () {
	if commitish_present; then
		git diff --name-only "$commitish" "$@"
	else
		git diff --name-only "$@"
	fi
}

staged_files() {
	if commitish_present; then
		git diff --name-only --cached "$commitish" "$@"
	else
		git diff --name-only --cached "$@"
	fi
}

cleanup_temp_files ()
{
	if test "$1" = --save-backup; then
		mv -- "$BACKUP" "$MERGED.orig"
		rm -f -- "$LOCAL" "$REMOTE" "$BASE"
	else
		rm -f -- "$LOCAL" "$REMOTE" "$BASE" "$BACKUP"
	fi
}

check_unchanged ()
{
	if test "$MERGED" -nt "$BACKUP"; then
		status=0
	else
		while true
		do
			echo "$MERGED seems unchanged."
			printf "Was the merge successful? [y/n] "
			read answer < /dev/tty
			case "$answer" in
			y*|Y*) status=0; break ;;
			n*|N*) status=1; break ;;
			esac
		done
	fi
}

merge_file ()
{
	MERGED="$1"

	modified_mode=$(modified_files -- "$MERGED")
	index_mode=$(staged_files -- "$MERGED")

	if ! modified_present && ! index_present; then
		if test ! -f "$MERGED"; then
			echo "$MERGED: file not found"
		else
			echo "$MERGED: file is unchanged."
		fi
		exit 1
	fi

	head=${commitish-HEAD}
	ext="$$$(expr "$MERGED" : '.*\(\.[^/]*\)$')"
	BACKUP="./$MERGED.BACKUP.$ext"
	LOCAL="./$MERGED.LOCAL.$ext"
	REMOTE="./$MERGED.HEAD.$ext"
	BASE="./$MERGED.INDEX.$ext"

	mv -- "$MERGED" "$BACKUP"
	cp -- "$BACKUP" "$MERGED"

	cp "$MERGED" "$LOCAL"
	git show "$head":"$MERGED" > "$REMOTE"

	# If changes are present in the index use them as $BASE
	git checkout-index --prefix=.index- "$MERGED"
	mv .index-"$MERGED" "$BASE"

	printf "Editing '$MERGED':\n"
	printf "Hit return to start merge tool (%s): " "$merge_tool"
	read ans

	case "$merge_tool" in
	kdiff3)
		if index_present && modified_present; then
		(
			"$merge_tool_path" --auto \
				--L1 "[index] $MERGED" \
				--L2 "[current] $MERGED" \
				--L3 "[$head] $MERGED" \
				-o "$MERGED" "$BASE" "$LOCAL" "$REMOTE" \
				> /dev/null 2>&1
		)
		else
		(
			"$merge_tool_path" --auto \
				--L1 "[current] $MERGED" \
				--L2 "[$head] $MERGED" \
				-o "$MERGED" "$LOCAL" "$REMOTE" \
				> /dev/null 2>&1
		)
		fi
		status=$?
		;;

	tkdiff)
		if index_present && modified_present; then
			"$merge_tool_path" \
				-a "$BASE" \
				-o "$MERGED" "$LOCAL" "$REMOTE"
		else
			"$merge_tool_path" \
				-o "$MERGED" "$LOCAL" "$REMOTE"
		fi
		status=$?
		;;

	meld|vimdiff)
		touch "$BACKUP"
		"$merge_tool_path" "$LOCAL" "$MERGED" "$REMOTE"
		check_unchanged
		;;

	gvimdiff)
		touch "$BACKUP"
		"$merge_tool_path" -f "$LOCAL" "$MERGED" "$REMOTE"
		check_unchanged
		;;

	xxdiff)
		touch "$BACKUP"
		if index_present && modified_present; then
			"$merge_tool_path" -X --show-merged-pane \
				-R 'Accel.SaveAsMerged: "Ctrl-S"' \
				-R 'Accel.Search: "Ctrl+F"' \
				-R 'Accel.SearchForward: "Ctrl-G"' \
				--merged-file "$MERGED" \
				"$LOCAL" "$BASE" "$REMOTE"
		else
			"$merge_tool_path" -X --show-merged-pane \
				-R 'Accel.SaveAsMerged: "Ctrl-S"' \
				-R 'Accel.Search: "Ctrl+F"' \
				-R 'Accel.SearchForward: "Ctrl-G"' \
				--merged-file "$MERGED" \
				"$LOCAL" "$REMOTE"
		fi
		check_unchanged
		;;

	opendiff)
		touch "$BACKUP"
		if index_present && modified_present; then
			"$merge_tool_path" "$LOCAL" "$REMOTE" \
				-ancestor "$BASE" \
				-merge "$MERGED" | cat
		else
			"$merge_tool_path" "$LOCAL" "$REMOTE" \
				-merge "$MERGED" | cat
		fi
		check_unchanged
		;;

	ecmerge)
		touch "$BACKUP"
		if index_present && modified_present; then
			"$merge_tool_path" "$BASE" "$LOCAL" "$REMOTE" \
				--default --mode=merge3 --to="$MERGED"
		else
			"$merge_tool_path" "$LOCAL" "$REMOTE" \
				--default --mode=merge2 --to="$MERGED"
		fi
		check_unchanged
		;;

	emerge)
		if index_present; then
			"$merge_tool_path" \
				-f emerge-files-with-ancestor-command \
				"$LOCAL" "$REMOTE" "$BASE" \
				"$(basename "$MERGED")"
		else
			"$merge_tool_path" -f emerge-files-command \
				"$LOCAL" "$REMOTE" "$(basename "$MERGED")"
		fi
		status=$?
		;;
	*)
		if test -n "$merge_tool_cmd"; then
			if test "$merge_tool_trust_exit_code" = "false"; then
				touch "$BACKUP"
				( eval $merge_tool_cmd )
				check_unchanged
			else
				( eval $merge_tool_cmd )
				status=$?
			fi
		fi
		;;
	esac

	if test "$status" -ne 0; then
		echo "merge of $MERGED failed" 1>&2
		mv -- "$BACKUP" "$MERGED"
		cleanup_temp_files
		exit 1
	fi

	git add -- "$MERGED"
	cleanup_temp_files
}

while test $# != 0
do
	case "$1" in
	-t|--tool*)
		case "$#,$1" in
		*,*=*)
			merge_tool=$(expr "z$1" : 'z-[^=]*=\(.*\)')
			shift
			;;
		1,*)
			usage
			;;
		*)
			shift
			merge_tool="$1"
			shift
			;;
		esac
		;;
	-r|--ref*)
		case "$#,$1" in
		*,*=*)
			commitish=$(expr "z$1" : 'z-[^=]*=\(.*\)')
			shift
			;;
		1,*)
			usage
			;;
		*)
			shift
			commitish="$1"
			shift
			;;
		esac
		;;
	--)
		shift
		break
		;;
	-*)
		usage
		;;
	*)
		break
		;;
	esac
done

valid_custom_tool()
{
    merge_tool_cmd="$(git config mergetool.$1.cmd)"
    test -n "$merge_tool_cmd"
}

valid_tool()
{
	case "$1" in
	kdiff3 | tkdiff | xxdiff | meld | opendiff | emerge | vimdiff | gvimdiff | ecmerge)
		;; # happy
	*)
		if ! valid_custom_tool "$1"
		then
			return 1
		fi
		;;
	esac
}

init_merge_tool_path()
{
	merge_tool_path=$(git config mergetool."$1".path)
	if test -z "$merge_tool_path"; then
		case "$1" in
		emerge)
			merge_tool_path=emacs
			;;
		*)
			merge_tool_path="$1"
			;;
		esac
	fi
}


if test -z "$merge_tool"; then
	merge_tool=$(git config merge.tool)
	if test -n "$merge_tool" && ! valid_tool "$merge_tool"; then
		echo >&2 "git config option merge.tool set to unknown tool: $merge_tool"
		echo >&2 "Resetting to default..."
		unset merge_tool
	fi
fi

if test -z "$merge_tool"; then
	if test -n "$DISPLAY"; then
		merge_tool_candidates="kdiff3 tkdiff xxdiff meld gvimdiff"
		if test -n "$GNOME_DESKTOP_SESSION_ID"; then
			merge_tool_candidates="meld $merge_tool_candidates"
		fi
		if test "$KDE_FULL_SESSION" = "true"; then
			merge_tool_candidates="kdiff3 $merge_tool_candidates"
		fi
	fi

	if echo "${VISUAL:-$EDITOR}" | grep 'emacs' > /dev/null 2>&1; then
		merge_tool_candidates="$merge_tool_candidates emerge"
	fi

	if echo "${VISUAL:-$EDITOR}" | grep 'vim' > /dev/null 2>&1; then
		merge_tool_candidates="$merge_tool_candidates vimdiff"
	fi

	merge_tool_candidates="$merge_tool_candidates opendiff emerge vimdiff"
	echo "merge tool candidates: $merge_tool_candidates"

	for i in $merge_tool_candidates
	do
		init_merge_tool_path $i
		if type "$merge_tool_path" > /dev/null 2>&1; then
			merge_tool=$i
			break
		fi
	done

	if test -z "$merge_tool" ; then
		echo "No known merge resolution program available."
		exit 1
	fi

else
	if ! valid_tool "$merge_tool"; then
		echo >&2 "Unknown merge tool $merge_tool"
		exit 1
	fi

	init_merge_tool_path "$merge_tool"

	if test -z "$merge_tool_cmd" && ! type "$merge_tool_path" > /dev/null 2>&1; then
		echo "The merge tool $merge_tool is not available as '$merge_tool_path'"
		exit 1
	fi

	if ! test -z "$merge_tool_cmd"; then
		merge_tool_trust_exit_code="$(git config --bool mergetool.$merge_tool.trustExitCode || echo false)"
	fi
fi


if test $# -eq 0; then
	use_index=0
	files=$(modified_files)

	if test -z "$files"; then
		use_index=1
		files=$(staged_files)
	fi

	if test -z "$files"; then
		echo "No modified files exist."
		exit 0
	fi

	if test $use_index -eq 0; then
		modified_files |
		while IFS= read i
		do
			printf "\n"
			merge_file "$i" < /dev/tty > /dev/tty
		done
	else
		staged_files |
		while IFS= read i
		do
			printf "\n"
			merge_file "$i" < /dev/tty > /dev/tty
		done
	fi
else
	while test $# -gt 0
	do
		printf "\n"
		merge_file "$1"
		shift
	done
fi
exit 0
