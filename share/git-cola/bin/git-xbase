#!/usr/bin/env python

import os
import sys
import re
from argparse import ArgumentParser

from os.path import abspath
from os.path import dirname


def setup_environment():
    prefix = dirname(dirname(dirname(dirname(abspath(__file__)))))
    source_tree = os.path.join(prefix, 'cola', '__init__.py')
    if os.path.exists(source_tree):
        modules = prefix
    else:
        modules = os.path.join(prefix, 'share', 'git-cola', 'lib')
    sys.path.insert(1, modules)
setup_environment()

from cola import app
from cola import cmds
from cola import core
from cola import difftool
from cola import observable
from cola import qt
from cola import qtutils
from cola import utils
from cola.i18n import N_
from cola.dag.model import DAG
from cola.dag.model import RepoReader
from cola.widgets import defs
from cola.widgets.diff import DiffWidget
from cola.widgets.diff import COMMITS_SELECTED
from cola.widgets.standard import TreeWidget

from PyQt4 import QtGui
from PyQt4.QtCore import Qt
from PyQt4.QtCore import SIGNAL


PICK = 'pick'
FIXUP = 'fixup'
SQUASH = 'squash'
EDIT = 'edit'
REWORD = 'reword'


def rebase_commands():
    return (PICK, REWORD, EDIT, SQUASH, FIXUP,)


def rebase_commands_idx(name):
    return {PICK: 0, REWORD: 1, EDIT: 2, SQUASH: 3, FIXUP: 4,}[name]


def main():
    args = parse_args()
    app.setup_environment()
    new_app = app.new_application()
    app.new_model(new_app, os.getcwd())

    desktop = new_app.desktop()
    window = new_window(args.filename)
    window.resize(desktop.width(), desktop.height())
    window.show()
    window.raise_()
    new_app.exec_()
    return window.status


def parse_args():
    parser = ArgumentParser()
    parser.add_argument('filename', metavar='<filename>',
                        help='git-rebase-todo file to edit')
    return parser.parse_args()


def new_window(filename):
    editor = Editor(filename)
    window = MainWindow(editor)
    return window


class MainWindow(QtGui.QMainWindow):

    def __init__(self, editor, parent=None):
        super(MainWindow, self).__init__(parent)
        self.status = 1
        default_title = '%s - git xbase' % core.getcwd()
        title = core.getenv('GIT_XBASE_TITLE', default_title)
        self.setAttribute(Qt.WA_MacMetalStyle)
        self.setWindowTitle(title)
        self.setCentralWidget(editor)
        self.connect(editor, SIGNAL('exit(int)'), self.exit)
        editor.setFocus()

        self.show_help_action = qtutils.add_action(self,
                N_('Interactive Rebase Help...'), show_help, Qt.Key_Question)

        self.menubar = QtGui.QMenuBar(self)
        self.help_menu = self.menubar.addMenu(N_('Help'))
        self.help_menu.addAction(self.show_help_action)
        self.setMenuBar(self.menubar)

    def exit(self, status):
        self.status = status
        self.close()


class Editor(QtGui.QWidget):

    def __init__(self, filename, parent=None):
        super(Editor, self).__init__(parent)

        self.widget_version = 1
        self.filename = filename

        self.notifier = notifier = observable.Observable()
        self.diff = DiffWidget(notifier, self)
        self.tree = RebaseTreeWidget(notifier, self)
        self.setFocusProxy(self.tree)

        self.rebase_button = qt.create_button(
                text=core.getenv('GIT_XBASE_ACTION', N_('Rebase')),
                icon=qtutils.apply_icon())

        self.external_diff_button = qt.create_button(text=N_('External Diff'))
        self.external_diff_button.setEnabled(False)

        self.help_button = qt.create_button(
                text=N_('Help'),
                icon=qtutils.help_icon())

        self.cancel_button = qt.create_button(text=N_('Cancel'),
                                              icon=qtutils.close_icon())

        policy = self.tree.sizePolicy()
        policy.setVerticalStretch(1)
        self.tree.setSizePolicy(policy)

        splitter = QtGui.QSplitter()
        splitter.setHandleWidth(defs.handle_width)
        splitter.setOrientation(Qt.Vertical)
        splitter.insertWidget(0, self.tree)
        splitter.insertWidget(1, self.diff)
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 1)

        controls_layout = QtGui.QHBoxLayout()
        controls_layout.setMargin(defs.no_margin)
        controls_layout.setSpacing(defs.button_spacing)
        controls_layout.addWidget(self.rebase_button)
        controls_layout.addWidget(self.external_diff_button)
        controls_layout.addWidget(self.help_button)
        controls_layout.addStretch()
        controls_layout.addWidget(self.cancel_button)

        layout = QtGui.QVBoxLayout()
        layout.setMargin(defs.no_margin)
        layout.setSpacing(defs.spacing)
        layout.addWidget(splitter)
        layout.addLayout(controls_layout)
        self.setLayout(layout)

        notifier.add_observer(COMMITS_SELECTED, self.commits_selected)

        qtutils.connect_button(self.rebase_button, self.rebase)
        qtutils.connect_button(self.external_diff_button, self.external_diff)
        qtutils.connect_button(self.help_button, show_help)
        qtutils.connect_button(self.cancel_button, self.cancel)
        self.connect(self.tree, SIGNAL('external_diff()'), self.external_diff)

        insns = core.read(filename)
        self.parse_sequencer_instructions(insns)

    # notifier callbacks
    def commits_selected(self, commits):
        self.external_diff_button.setEnabled(bool(commits))

    # helpers
    def emit_exit(self, status):
        self.emit(SIGNAL('exit(int)'), status)

    def parse_sequencer_instructions(self, insns):
        idx = 1
        rebase_command = re.compile(
                r'^(# )?(pick|fixup|squash) ([0-9a-f]{7,40}) (.+)$')
        for line in insns.splitlines():
            match = rebase_command.match(line)
            if match is None:
                continue
            enabled = match.group(1) is None
            command = match.group(2)
            sha1hex = match.group(3)
            summary = match.group(4)
            self.tree.add_step(idx, enabled, command, sha1hex, summary)
            idx += 1
        self.tree.decorate()
        self.tree.refit()

    # actions
    def cancel(self):
        self.emit_exit(1)

    def rebase(self):
        lines = [item.value() for item in self.tree.items()]
        sequencer_instructions = '\n'.join(lines) + '\n'
        try:
            core.write(self.filename, sequencer_instructions)
            self.emit_exit(0)
        except Exception as e:
            msg, details = utils.format_exception(e)
            sys.stderr.write(msg + '\n\n' + details)
            self.emit_exit(128)

    def external_diff(self):
        items = self.tree.selected_items()
        if not items:
            return
        item = items[0]
        difftool.diff_expression(self, item.sha1hex + '^!',
                                 hide_expr=True)


class RebaseTreeWidget(TreeWidget):

    def __init__(self, notifier, parent=None):
        super(RebaseTreeWidget, self).__init__()
        self.notifier = notifier
        # header
        self.setHeaderLabels([N_('#'),
                              N_('Enabled'),
                              N_('Command'),
                              N_('SHA-1'),
                              N_('Summary')])
        self.header().setStretchLastSection(True)
        self.setColumnCount(5)

        # drag+drop
        self.setSelectionMode(self.SingleSelection)
        self.setDragEnabled(True)
        self.setAcceptDrops(True)
        self.setDropIndicatorShown(True)
        self.setDragDropMode(QtGui.QAbstractItemView.InternalMove)
        self.model().setSupportedDragActions(Qt.MoveAction);

        # actions
        self.copy_sha1_action = qtutils.add_action(self,
                N_('Copy SHA-1'), self.copy_sha1, QtGui.QKeySequence.Copy)

        self.external_diff_action = qtutils.add_action(self,
                N_('External Diff'), self.external_diff,
                cmds.LaunchDifftool.SHORTCUT)

        self.toggle_enabled_action = qtutils.add_action(self,
                N_('Toggle Enabled'), self.toggle_enabled,
                Qt.Key_Space)

        self.connect(self, SIGNAL('itemChanged(QTreeWidgetItem *, int)'),
                     self.item_changed)

        self.connect(self, SIGNAL('itemSelectionChanged()'),
                     self.selection_changed)

    def add_step(self, idx, enabled, action, sha1hex, summary):
        item = RebaseTreeWidgetItem(idx, enabled, action,
                                    sha1hex, summary, self)
        self.invisibleRootItem().addChild(item)

    def decorate(self):
        for item in self.items():
            item.new_combo()

    def refit(self):
        self.resizeColumnToContents(0)
        self.resizeColumnToContents(1)
        self.resizeColumnToContents(2)
        self.resizeColumnToContents(3)
        self.resizeColumnToContents(4)

    # actions
    def item_changed(self, item, column):
        if column == item.ENABLED_COLUMN:
            self.validate()

    def validate(self):
        for item in self.items():
            if not item.is_enabled():
                continue
            if item.command != PICK:
                item.command = PICK
                item.new_combo()
            break

    def copy_sha1(self):
        item = self.selected_item()
        if item is None:
            return
        sha1hex = item.sha1hex
        qtutils.set_clipboard(sha1hex)

    def selection_changed(self):
        item = self.selected_item()
        if item is None:
            return
        sha1hex = item.sha1hex
        dag = DAG(sha1hex, 2)
        repo = RepoReader(dag)
        commits = []
        for c in repo:
            commits.append(c)
        if commits:
            commits = [commits[-1]]
        self.notifier.notify_observers(COMMITS_SELECTED, [commits[-1]])

    def external_diff(self):
        self.emit(SIGNAL('external_diff()'))

    def toggle_enabled(self):
        item = self.selected_item()
        if item is None:
            return
        item.toggle_enabled()

    # Qt events
    def supportedDropActions(self):
        return Qt.MoveAction

    def dropEvent(self, event):
        super(RebaseTreeWidget, self).dropEvent(event)
        self.decorate()
        self.refit()
        self.validate()

    def contextMenuEvent(self, event):
        menu = QtGui.QMenu(self)
        menu.addAction(self.toggle_enabled_action)
        menu.addSeparator()
        menu.addAction(self.copy_sha1_action)
        menu.addAction(self.external_diff_action)
        menu.exec_(self.mapToGlobal(event.pos()))


class RebaseTreeWidgetItem(QtGui.QTreeWidgetItem):

    ENABLED_COLUMN = 1

    def __init__(self, idx, enabled, command, sha1hex, summary, parent):
        QtGui.QTreeWidgetItem.__init__(self, parent)
        self.command = command
        self.sha1hex = sha1hex
        self.summary = summary
        self.parent = parent
        self.combo = None

        self.setText(0, '%02d' % idx)
        self.set_enabled(enabled)
        # combo box on 2
        self.setText(3, sha1hex)
        self.setText(4, summary)
        self.setFlags((self.flags() | Qt.ItemIsUserCheckable) &
                      ~Qt.ItemIsDropEnabled)

    def value(self):
        return '%s %s %s %s' % (
                not self.is_enabled() and '# ' or '',
                self.command, self.sha1hex, self.summary)

    def is_enabled(self):
        return self.checkState(self.ENABLED_COLUMN) == Qt.Checked

    def set_enabled(self, enabled):
        self.setCheckState(self.ENABLED_COLUMN,
                           enabled and Qt.Checked or Qt.Unchecked)

    def toggle_enabled(self):
        self.set_enabled(not self.is_enabled())

    def new_combo(self):
        combo = QtGui.QComboBox()
        combo.addItems(rebase_commands())
        combo.setEditable(False)
        combo.setCurrentIndex(rebase_commands_idx(self.command))
        self.parent.setItemWidget(self, 2, combo)
        self.parent.connect(combo,
                            SIGNAL('currentIndexChanged(const QString &)'),
                            self.combo_changed)

    def combo_changed(self, value):
        self.command = unicode(value)
        self.parent.validate()


def show_help():
    help_text = N_("""
Commands:
  pick = use commit
  reword = use commit, but edit the commit message
  edit = use commit, but stop for amending
  squash = use commit, but meld into previous commit
  fixup = like "squash", but discard this commit's log message

These lines can be re-ordered; they are executed from top to bottom.

If you disable a line here THAT COMMIT WILL BE LOST.

However, if you disable everything, the rebase will be aborted.
""").strip()

    parent = qtutils.active_window()
    text = QtGui.QLabel(parent)
    text.setText(help_text)
    text.setTextInteractionFlags(Qt.NoTextInteraction)

    layout = QtGui.QHBoxLayout()
    layout.setMargin(defs.margin)
    layout.setSpacing(defs.spacing)
    layout.addWidget(text)

    widget = QtGui.QDialog(parent)
    widget.setWindowModality(Qt.WindowModal)
    widget.setWindowTitle(N_('Help'))
    widget.setLayout(layout)

    qtutils.add_action(widget, N_('Close'), widget.accept,
                       Qt.Key_Question,
                       Qt.Key_Enter,
                       Qt.Key_Return)
    widget.show()
    return widget


if __name__ == '__main__':
    sys.exit(main())
